{"version":3,"sources":["components/Header.js","components/LayerChooser.js","components/ActivityChooser.js","components/Legend.js","components/MainMap.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","aboutShown","area","showAbout","shown","setState","selectArea","props","className","this","DropdownButton","variant","onSelect","e","id","title","Dropdown","Item","eventKey","Button","onClick","Modal","show","onHide","closeButton","Title","Body","Footer","Component","LayerChooser","selectLayer","content","layer","text","contents","map","key","ActivityChooser","activity","icon","selectActivity","bind","type","size","Legend","box","L","control","position","onAdd","div","DomUtil","create","values","i","levels","length","start","end","value","getColor","parseInt","toLocaleString","push","innerHTML","join","addTo","leaflet","MapControl","propTypes","colors","PropTypes","array","isRequired","string","withLeaflet","library","add","faDotCircle","faRunning","faHamburger","faFilm","COLORS","LEVELS","MainMap","activityData","indexData","viewport","vp","selectedActivity","loading","selectedContentId","selectedContent","currentArea","val","color","resetView","onViewportChanged","setSelectedActivity","nswRequests","axios","get","config","webServiceUrl","crossDomain","ausRequests","all","then","spread","responses","data","nsw","catch","errors","console","log","aus","setInterval","changeViewPort","Map","LayersControl","BaseLayer","checked","name","TileLayer","attribution","url","LayerGroup","GeoJSON","style","feature","weight","fillColor","fillOpacity","city","k","CircleMarker","center","radius","Math","stroke","Tooltip","direction","offset","opacity","round","ButtonGroup","toggle","layers","vertical","activities","NSW_VIEWPORT","zoom","isMobile","AUS_VIEWPORT","DEFAULT_VIEWPORT","App","setSelected","selected","selectOverlayLayer","selectedData","document","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.47112402.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Modal, Button, DropdownButton, Dropdown } from 'react-bootstrap';\n\nexport class Header extends Component {\n  state = {\n    aboutShown: false,\n    area: \"AUS\"\n  }\n\n  showAbout = (shown) => {\n    this.setState({ aboutShown: !this.state.aboutShown })\n  }\n  \n  selectArea = (area) => {\n    this.setState({ area })\n    this.props.selectArea(area)\n  }\n  render() {\n    return (\n    <>\n        <header>\n          <h1 className=\"text1\">Activities in {this.state.area}</h1>\n          <h2 className=\"text2\">#AustraliaLockdown</h2>\n          <DropdownButton\n            className=\"area-selector\" variant=\"outline-warning\"\n            onSelect={e => {this.selectArea(e)}}\n            id=\"dropdown-basic-button\"\n            title=\"Select Area\">\n              <Dropdown.Item eventKey=\"aus\">Australia</Dropdown.Item>\n              <Dropdown.Item eventKey=\"nsw\">New South Wales</Dropdown.Item>\n            </DropdownButton>\n          <Button\n            variant=\"outline-warning\" className=\"text3\"\n            onClick={this.showAbout}>About this map\n          </Button>\n        </header>\n        <Modal show={this.state.aboutShown} onHide={this.showAbout}>\n          <Modal.Header closeButton>\n            <Modal.Title>Activities during #AustraliaLockdown</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <p>This map shows popular activities in Australian metropolitan\n              areas as well as New South Wales during #LockdownAustralia based\n              on Twitter data.</p>\n            <p>This application is developed for Cluster and Cloud Computing\n              assigment 2 Semester 1 2020 by</p>\n            <ul>\n              <li>klastanto@student.unimelb.edu.au</li>\n              <li>mchaerudin@student.unimelb.edu.au</li>\n              <li>sanisuzzaman@student.unimelb.edu.au</li>\n              <li>devinvinun@student.unimelb.edu.au</li>\n              <li>abhisheka@student.unimelb.edu.au</li>\n            </ul>\n            Credits:\n            <ul>\n            <li>Map provider: OpenStreetMap by OpenStreetMap contributors</li>\n            <li>Data provider: Twitter, AURIN</li>\n            <li>Icons provider: Fontawesome (CC BY 4.0 License)</li>\n            </ul>\n            </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.showAbout}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n    </>\n    )\n}\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Dropdown, DropdownButton } from 'react-bootstrap';\n\nexport class LayerChooser extends Component {\n\n  selectLayer = (content) => {\n    this.props.selectLayer(content)\n  }\n  \n  render() {\n    const { text, variant, className, contents } = this.props.layer;\n      return (\n        <div>\n          <DropdownButton\n            className={ className }\n            variant={ variant }\n            id=\"dropdown-basic-button\"\n            title={ text }>\n              { contents.map(content => (\n                <Dropdown.Item\n                  key={ content.id }\n                  eventKey={ content.id }\n                  onSelect={ () => this.selectLayer(content) }>{ content.text }\n                </Dropdown.Item>\n              )) }\n          </DropdownButton>\n        </div>\n      )\n    }\n  }\n\nLayerChooser.propTypes = {\n  layer: PropTypes.object.isRequired\n}\n\nexport default LayerChooser;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from 'react-bootstrap';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport class ActivityChooser extends Component {\n  render() {\n    const { id, text, icon, variant, className } = this.props.activity;\n      return (\n        <div>\n          <Button variant={ variant }\n            onClick={this.props.selectActivity.bind(this, id)}\n            type=\"button\"\n            className={ className }>\n              { text }\n              <FontAwesomeIcon\n                icon={ icon }\n                size=\"2x\"/>\n            </Button>\n        </div>\n      )\n    }\n  }\n\nActivityChooser.propTypes = {\n  activity: PropTypes.object.isRequired\n}\n\nexport default ActivityChooser;\n","import { MapControl, withLeaflet } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport PropTypes from \"prop-types\";\n\nclass Legend extends MapControl {\n  createLeafletElement(props) {}\n\n  componentDidMount() {\n    const LOCALE = \"en-AU\";\n    const box = L.control({ position: this.props.position });\n\n    box.onAdd = () => {\n      const div = L.DomUtil.create(\"div\", \"legend\");\n      let values = [];\n      \n      for (let i = 0; i < this.props.levels.length; i++) {\n        let start = this.props.levels[i];\n        let end = this.props.levels[i + 1];\n        let value = \"<span style='opacity: 0.85; background:\" +\n            this.props.getColor(start + 1) +\n            \"'>&nbsp; &nbsp; &nbsp;</span> \" +\n            parseInt(start).toLocaleString(LOCALE) +\n            (end ?\n            \"&ndash;\" + parseInt(end).toLocaleString(LOCALE) : \"+\")\n\n        values.push(value);\n      }\n\n      div.innerHTML = values.join(\"<br/>\");\n      return div;\n    };\n    \n    box.addTo(this.props.leaflet.map);\n  }\n}\n\nLegend.propTypes = {\n  colors: PropTypes.array.isRequired,\n  levels: PropTypes.array.isRequired,\n  position: PropTypes.string.isRequired\n}\n\nexport default withLeaflet(Legend);\n","import React, { Component } from \"react\";\nimport { Map, TileLayer,  GeoJSON, CircleMarker, Tooltip, LayersControl,\n  LayerGroup } from \"react-leaflet\";\nimport Control from \"react-leaflet-control\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faDotCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { faRunning, faHamburger,\n  faFilm } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { ButtonGroup } from \"react-bootstrap\";\n\nimport axios from \"axios\";\n\nimport activities from \"../activities.json\";\nimport layers from \"../layers.json\";\nimport config from \"../conf/config.json\";\n\nimport LayerChooser from \"./LayerChooser\";\nimport ActivityChooser from \"./ActivityChooser\";\nimport Legend from \"./Legend\";\n\nlibrary.add(faDotCircle, faRunning, faHamburger, faFilm); \n\nconst COLORS = [\"#f7fbff\", \"#deebf7\", \"#c6dbef\", \"#9ecae1\", \"#6baed6\",\n                \"#4292c6\", \"#2171b5\", \"#08519c\", \"#08306b\", \"#05234d\"]\n\nconst LEVELS = [0, 10000, 20000, 30000, 40000,\n                50000, 60000, 70000, 80000, 90000];\n\n\nclass MainMap extends Component {\n\n  activityData = {}\n  indexData = {}\n\n  state = {\n    viewport: this.props.vp,\n    selectedActivity: null,\n    loading: {\n      \"nsw\": true,  \n      \"aus\": true\n      },\n    selectedContentId: 0,\n    selectedContent: null,\n    currentArea: \"aus\"\n  }\n\n  componentDidMount(){\n    let nswRequests = [\n      axios.get(config.webServiceUrl + \"/summaries/nsw\", {crossDomain: true }),\n      axios.get(config.webServiceUrl + \"/indices/nsw\", {crossDomain: true })\n    ];\n\n    let ausRequests = [\n      axios.get(config.webServiceUrl + \"/summaries/aus\", {crossDomain: true }),\n      axios.get(config.webServiceUrl + \"/indices/aus\", {crossDomain: true })\n    ];\n\n  axios\n    .all(nswRequests)\n    .then(\n      axios.spread((...responses) => {\n        this.activityData[\"nsw\"] = responses[0].data;\n        this.indexData[\"nsw\"] = responses[1].data;\n        let loading = {...this.state.loading};\n        loading.nsw = false;\n        this.setState({ loading });\n      })\n    )\n    .catch(errors => {\n      console.log(\"Errors: \"+errors);\n    });\n\n    axios\n    .all(ausRequests)\n    .then(\n      axios.spread((...responses) => {\n        this.activityData[\"aus\"] = responses[0].data;\n        this.indexData[\"aus\"] = responses[1].data;\n        let loading = {...this.state.loading};\n        loading.aus = false;\n        this.setState({ loading });\n        console.log(\"AU data loaded.\");\n        console.log(this.state.loading)\n      })\n    )\n    .catch(errors => {\n        console.log(\"Errors: \"+errors);\n    });\n\n    }\n\n  getColor = (val) => {\n    let color = COLORS[0];\n\n    if (val > 90000) {\n      color = COLORS[9];\n    } else if (val > 80000) {\n      color = COLORS[8];\n    } else if (val > 70000) {\n      color = COLORS[7];\n    } else if (val > 60000) {\n      color = COLORS[6];\n    } else if (val > 50000) {\n      color = COLORS[5];\n    } else if (val > 40000) {\n      color = COLORS[4];\n    } else if (val > 30000) {\n      color = COLORS[3];\n    } else if (val > 20000) {\n      color = COLORS[2];\n    } else if (val > 10000) {\n      color = COLORS[1];\n    }\n\n    return color;\n  };\n\n  resetView = () => {\n    this.setState({ viewport: this.props.vp });\n  }\n\n  onViewportChanged = (viewport) => {\n    this.setState({ viewport });\n  }\n\n  setSelectedActivity = (activity) => {\n    this.setState({ selectedActivity: activity });\n  }\n\n  changeViewPort(area) {\n    if(this.state.currentArea !== area ) {\n      this.setState({ currentArea:area });\n      this.resetView();\n    }\n  }\n\n  selectLayer = (content) => {\n    this.setState({ selectedContentId:content.id,\n                    selectedContent:content })\n  }\n\n  render() {\n    setInterval(() => this.changeViewPort(this.props.area), 1000);\n    return (\n      <Map id=\"map\" onViewportChanged={ this.onViewportChanged }\n          viewport={ this.state.viewport }>\n        <LayersControl position=\"topleft\">\n          <Control position=\"topleft\">\n            <button className=\"leaflet-control-layers feat-btn-reset-view\"\n              onClick={ this.resetView }>\n              <FontAwesomeIcon icon={ faDotCircle } size=\"lg\"/>\n            </button>\n          </Control>\n          <LayersControl.BaseLayer checked=\"checked\" name=\"Black and White\">\n            <TileLayer\n              attribution=\"&amp;copy <a href='http://osm.org/copyright'>\n                OpenStreetMap</a> contributors\"\n              url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n          <LayersControl.BaseLayer name=\"Coloured\">\n            <TileLayer\n              attribution=\"&amp;copy <a href='http://osm.org/copyright'>\n                OpenStreetMap</a> contributors\"\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n          </LayersControl>\n          <LayerGroup>\n          { this.indexData[this.state.currentArea] ? (\n            <GeoJSON\n              key={ this.state.currentArea }\n              data={ this.indexData[this.state.currentArea] }\n              style={ (feature) => ({\n                color: '#4a83ec',\n                weight: 0.5,\n                fillColor: this.getColor(\n                feature['properties'][this.state.selectedContentId]),\n                fillOpacity: 0.85\n              }) }\n            />\n          ) : (<></>) }\n          </LayerGroup>\n          <LayerGroup>\n          { this.state.selectedActivity \n              && this.activityData[this.state.currentArea][\"summary\"] ? (\n            this.activityData[this.state.currentArea][\"summary\"].map(\n                (city, k) => {\n              return (\n                <CircleMarker\n                  color=\"#dbae28\"\n                  key={ k }\n                  center={ [city[\"point\"][1], city[\"point\"][0]] }\n                  radius={ 5 * Math.log(\n                    city[this.state.selectedActivity+\"_total\"]) }\n                  fillOpacity={ 0.3 }\n                  stroke={ true }\n                  weight={ 2 }\n                >\n                  <Tooltip direction=\"right\" offset={[-8, -2]} opacity={ 1 }>\n                    <strong>{ city[\"name\"] } : </strong>\n                    <span>{ parseInt(\n                      city[this.state.selectedActivity+\"_total\"])\n                        .toLocaleString(\"en-AU\") } ({ +(100*Math.round(\n                          city[this.state.selectedActivity]+\"e+4\") + \"e-4\") }%)\n                    </span>\n                  </Tooltip>\n                </CircleMarker>\n              );\n           })) : (<></>) }\n          </LayerGroup>\n          \n          { this.state.selectedContent ? (\n            <>\n              <Legend position=\"bottomleft\" \n                getColor={ this.getColor }\n                levels={ LEVELS }/>\n              <Control position=\"bottomleft\" >\n                <span>\n                  <strong>\n                    { this.state.selectedContent ?\n                      this.state.selectedContent[\"text\"] : \"\" }\n                  </strong>\n                </span>  \n              </Control>\n            </>\n            ):(<></>) }\n          { !this.state.loading[this.state.currentArea] ? (\n            <>\n              <Control position=\"topright\">\n                <ButtonGroup toggle>\n                  {layers.map(layer => (\n                    <LayerChooser\n                      layer={layer}\n                      key={layer.id}\n                      variant={layer.variant}\n                      className={layer.className}\n                      selectLayer={this.selectLayer}\n                    />\n                  )) }\n                  </ButtonGroup>\n                <br/><br/><br/>\n              </Control>\n\n              <Control position=\"topright\">\n                <ButtonGroup vertical>\n                  { activities.map(activity => (\n                    <ActivityChooser\n                      activity={activity}\n                      key={activity.id}\n                      selectActivity={this.setSelectedActivity}\n                    />\n                  )) }\n                </ButtonGroup>\n              </Control>\n            </>\n          ) : (\n            <Control position=\"topright\" >\n              <span><strong>Loading data...</strong></span>\n            </Control>\n          ) }\n        </Map>\n      \n    );\n  }\n}\n\nexport default MainMap;","import React, { Component } from \"react\";\n\nimport { isMobile } from \"react-device-detect\";\n\nimport \"./App.css\";\n  \nimport Header from \"./components/Header\";\nimport MainMap from \"./components/MainMap\";\n\n\nconst NSW_ZOOM_LEVEL_MOBILE = 9; // NSW mobile zoom level\nconst NSW_ZOOM_LEVEL_DESKTOP = 9; // NSW desktop zoom level\nconst NSW_CENTER = [-33.834905,150.9673231]; // NSW center\n\nconst AUS_ZOOM_LEVEL_MOBILE = 4; // Australia mobile zoom level\nconst AUS_ZOOM_LEVEL_DESKTOP = 5; // Australia desktop zoom level\nconst AUS_CENTER = [-28.6101111,134.3547222] // Australia center\n\nconst NSW_VIEWPORT = {\n  center: NSW_CENTER,\n  zoom: isMobile ? NSW_ZOOM_LEVEL_MOBILE : NSW_ZOOM_LEVEL_DESKTOP\n}\n\nconst AUS_VIEWPORT = {\n  center: AUS_CENTER,\n  zoom: isMobile ? AUS_ZOOM_LEVEL_MOBILE : AUS_ZOOM_LEVEL_DESKTOP\n}\n\nconst DEFAULT_VIEWPORT = AUS_VIEWPORT;\n\nclass App extends Component {\n  state = {\n    viewport: DEFAULT_VIEWPORT,\n    selectedActivity: \"exercise\",\n    area: \"aus\"\n  }\n\n  componentDidMount(){\n    document.title = \"Activities during #AustraliaLockdown\"\n  }\n\n  resetView = () => {\n    this.setState({ viewport: DEFAULT_VIEWPORT })\n  }\n\n  onViewportChanged = (viewport) => {\n    this.setState({ viewport })\n  }\n\n  setSelected = (activity) => {\n    this.setState({ selected: activity })\n  }\n\n  selectOverlayLayer = (layer) => {\n    this.setState({ selectedData: layer.data })\n  }\n\n  selectArea = (area) => {\n    this.setState({ area })\n    if(area === \"aus\") {\n      this.setState({ viewport: AUS_VIEWPORT })\n    } else {\n      this.setState({ viewport: NSW_VIEWPORT })\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Header selectArea={this.selectArea}/>\n          <div id=\"container\">\n            <MainMap vp={this.state.viewport} area={this.state.area} />\n          </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}