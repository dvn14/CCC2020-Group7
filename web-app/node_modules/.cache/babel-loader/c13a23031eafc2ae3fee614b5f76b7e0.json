{"ast":null,"code":"import { MapControl, withLeaflet } from \"react-leaflet\";\nimport L from \"leaflet\";\nconst colors = ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#005a32'];\n\nclass Legend extends MapControl {\n  createLeafletElement(props) {}\n\n  componentDidMount() {\n    const {\n      id,\n      title,\n      description\n    } = this.props.legend; // get color depending on population density value\n\n    const getColor = d => {\n      return d > 2000 ? colors[8] : d > 1000 ? colors[7] : d > 500 ? colors[6] : d > 200 ? colors[5] : d > 100 ? colors[4] : d > 50 ? colors[3] : d > 20 ? colors[2] : d > 10 ? colors[1] : colors[0];\n    };\n\n    const legend = L.control({\n      position: \"bottomright\"\n    });\n\n    legend.onAdd = () => {\n      const div = L.DomUtil.create(\"div\", \"info legend\");\n      const grades = [0, 10, 20, 50, 100, 200, 500, 1000];\n      let labels = [];\n      let from;\n      let to;\n      labels.push(\"<p><strong>Employement</strong></p>\");\n      labels.push(\"<p>Employement</p>\");\n\n      for (let i = 0; i < grades.length; i++) {\n        from = grades[i];\n        to = grades[i + 1];\n        labels.push('<i style=\"opacity: 0.6;background:' + getColor(from + 1) + '\">&nbsp; &nbsp; &nbsp;</i> ' + from + (to ? \"&ndash;\" + to : \"+\"));\n      }\n\n      div.innerHTML = labels.join(\"<br>\");\n      return div;\n    };\n\n    const {\n      map\n    } = this.props.leaflet;\n    legend.addTo(map);\n  }\n\n}\n\nexport default withLeaflet(Legend);","map":{"version":3,"sources":["/home/tanto/Courses/CCC/Learns/react/ausmap/src/components/Legend.js"],"names":["MapControl","withLeaflet","L","colors","Legend","createLeafletElement","props","componentDidMount","id","title","description","legend","getColor","d","control","position","onAdd","div","DomUtil","create","grades","labels","from","to","push","i","length","innerHTML","join","map","leaflet","addTo"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,eAAxC;AACA,OAAOC,CAAP,MAAc,SAAd;AAGA,MAAMC,MAAM,GAAG,CAAC,SAAD,EAAW,SAAX,EAAqB,SAArB,EAA+B,SAA/B,EAA0C,SAA1C,EAAoD,SAApD,EACC,SADD,EACY,SADZ,CAAf;;AAGA,MAAMC,MAAN,SAAqBJ,UAArB,CAAgC;AAC9BK,EAAAA,oBAAoB,CAACC,KAAD,EAAQ,CAAE;;AAC9BC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA,KAAN;AAAaC,MAAAA;AAAb,QAA6B,KAAKJ,KAAL,CAAWK,MAA9C,CADkB,CAElB;;AACA,UAAMC,QAAQ,GAAGC,CAAC,IAAI;AACpB,aAAOA,CAAC,GAAG,IAAJ,GACHV,MAAM,CAAC,CAAD,CADH,GAEHU,CAAC,GAAG,IAAJ,GACAV,MAAM,CAAC,CAAD,CADN,GAEAU,CAAC,GAAG,GAAJ,GACAV,MAAM,CAAC,CAAD,CADN,GAEAU,CAAC,GAAG,GAAJ,GACAV,MAAM,CAAC,CAAD,CADN,GAEAU,CAAC,GAAG,GAAJ,GACAV,MAAM,CAAC,CAAD,CADN,GAEAU,CAAC,GAAG,EAAJ,GACAV,MAAM,CAAC,CAAD,CADN,GAEAU,CAAC,GAAG,EAAJ,GACAV,MAAM,CAAC,CAAD,CADN,GAEAU,CAAC,GAAG,EAAJ,GACAV,MAAM,CAAC,CAAD,CADN,GAEAA,MAAM,CAAC,CAAD,CAhBV;AAiBD,KAlBD;;AAoBA,UAAMQ,MAAM,GAAGT,CAAC,CAACY,OAAF,CAAU;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAV,CAAf;;AAEAJ,IAAAA,MAAM,CAACK,KAAP,GAAe,MAAM;AACnB,YAAMC,GAAG,GAAGf,CAAC,CAACgB,OAAF,CAAUC,MAAV,CAAiB,KAAjB,EAAwB,aAAxB,CAAZ;AACA,YAAMC,MAAM,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,IAA/B,CAAf;AACA,UAAIC,MAAM,GAAG,EAAb;AACA,UAAIC,IAAJ;AACA,UAAIC,EAAJ;AAEAF,MAAAA,MAAM,CAACG,IAAP,CAAY,qCAAZ;AACAH,MAAAA,MAAM,CAACG,IAAP,CAAY,oBAAZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtCH,QAAAA,IAAI,GAAGF,MAAM,CAACK,CAAD,CAAb;AACAF,QAAAA,EAAE,GAAGH,MAAM,CAACK,CAAC,GAAG,CAAL,CAAX;AAEAJ,QAAAA,MAAM,CAACG,IAAP,CACE,uCACEZ,QAAQ,CAACU,IAAI,GAAG,CAAR,CADV,GAEE,6BAFF,GAGEA,IAHF,IAIGC,EAAE,GAAG,YAAYA,EAAf,GAAoB,GAJzB,CADF;AAOD;;AAEDN,MAAAA,GAAG,CAACU,SAAJ,GAAgBN,MAAM,CAACO,IAAP,CAAY,MAAZ,CAAhB;AACA,aAAOX,GAAP;AACD,KAxBD;;AA0BA,UAAM;AAAEY,MAAAA;AAAF,QAAU,KAAKvB,KAAL,CAAWwB,OAA3B;AACAnB,IAAAA,MAAM,CAACoB,KAAP,CAAaF,GAAb;AACD;;AAvD6B;;AA0DhC,eAAe5B,WAAW,CAACG,MAAD,CAA1B","sourcesContent":["import { MapControl, withLeaflet } from \"react-leaflet\";\nimport L from \"leaflet\";\n\n\nconst colors = ['#f7fcf5','#e5f5e0','#c7e9c0','#a1d99b', '#74c476','#41ab5d',\n                '#238b45', '#005a32'];\n\nclass Legend extends MapControl {\n  createLeafletElement(props) {}\n  componentDidMount() {\n    const { id, title, description } = this.props.legend;\n    // get color depending on population density value\n    const getColor = d => {\n      return d > 2000\n        ? colors[8]\n        : d > 1000\n        ? colors[7]\n        : d > 500\n        ? colors[6]\n        : d > 200\n        ? colors[5]\n        : d > 100\n        ? colors[4]\n        : d > 50\n        ? colors[3]\n        : d > 20\n        ? colors[2]\n        : d > 10\n        ? colors[1]\n        : colors[0];\n    };\n\n    const legend = L.control({ position: \"bottomright\" });\n\n    legend.onAdd = () => {\n      const div = L.DomUtil.create(\"div\", \"info legend\");\n      const grades = [0, 10, 20, 50, 100, 200, 500, 1000];\n      let labels = [];\n      let from;\n      let to;\n\n      labels.push(\"<p><strong>Employement</strong></p>\")\n      labels.push(\"<p>Employement</p>\")\n      for (let i = 0; i < grades.length; i++) {\n        from = grades[i];\n        to = grades[i + 1];\n\n        labels.push(\n          '<i style=\"opacity: 0.6;background:' +\n            getColor(from + 1) +\n            '\">&nbsp; &nbsp; &nbsp;</i> ' +\n            from +\n            (to ? \"&ndash;\" + to : \"+\")\n        );\n      }\n\n      div.innerHTML = labels.join(\"<br>\");\n      return div;\n    };\n\n    const { map } = this.props.leaflet;\n    legend.addTo(map);\n  }\n}\n\nexport default withLeaflet(Legend);\n"]},"metadata":{},"sourceType":"module"}