{"ast":null,"code":"var _jsxFileName = \"/mnt/tanto/Courses/CCC/Learns/react/ausmap-cdb/src/components/MainMap.js\";\nimport React, { Component } from \"react\";\nimport { Map, TileLayer, GeoJSON, Marker, Popup, CircleMarker, Tooltip, LayersControl, LayerGroup, Circle } from \"react-leaflet\";\nimport Control from \"react-leaflet-control\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faDotCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { faRunning, faHamburger, faFilm } from \"@fortawesome/free-solid-svg-icons\";\nimport { ButtonGroup } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport activities from \"../activities.json\";\nimport layers from \"../layers.json\";\nimport LayerChooser from \"./LayerChooser\";\nimport ActivityChooser from \"./ActivityChooser\";\nimport Legend from \"./Legend\";\nlibrary.add(faDotCircle, faRunning, faHamburger, faFilm);\nconst COLORS = [\"#f7fbff\", \"#deebf7\", \"#c6dbef\", \"#9ecae1\", \"#6baed6\", \"#4292c6\", \"#2171b5\", \"#08519c\", \"#08306b\", \"#05234d\"]; //const SERVICE_ROOT_URL = \"http://localhost/json/data\";\n\nconst SERVICE_ROOT_URL = \"http://localhost:5000\"; //const SERVICE_ROOT_URL = \"http://progo.lastanto.com/json/data\";\n\nclass MainMap extends Component {\n  constructor(...args) {\n    super(...args);\n    this.activityData = {};\n    this.indexData = {};\n    this.state = {\n      viewport: this.props.vp,\n      selectedActivity: null,\n      loading: {\n        \"nsw\": true,\n        \"aus\": true\n      },\n      selectedContentId: 0,\n      selectedContent: null,\n      currentArea: \"aus\"\n    };\n\n    this.getColor = val => {\n      let color = COLORS[0];\n\n      if (val > 90000) {\n        color = COLORS[9];\n      } else if (val > 80000) {\n        color = COLORS[8];\n      } else if (val > 70000) {\n        color = COLORS[7];\n      } else if (val > 60000) {\n        color = COLORS[6];\n      } else if (val > 50000) {\n        color = COLORS[5];\n      } else if (val > 40000) {\n        color = COLORS[4];\n      } else if (val > 30000) {\n        color = COLORS[3];\n      } else if (val > 20000) {\n        color = COLORS[2];\n      } else if (val > 10000) {\n        color = COLORS[1];\n      }\n\n      return color;\n    };\n\n    this.resetView = () => {\n      this.setState({\n        viewport: this.props.vp\n      });\n    };\n\n    this.onViewportChanged = viewport => {\n      this.setState({\n        viewport\n      });\n    };\n\n    this.setSelectedActivity = activity => {\n      this.setState({\n        selectedActivity: activity\n      });\n    };\n\n    this.selectLayer = content => {\n      this.setState({\n        selectedContentId: content.id,\n        selectedContent: content\n      });\n    };\n  }\n\n  componentDidMount() {\n    let nswRequests = [axios.get(SERVICE_ROOT_URL + \"/summaries/nsw\", {\n      crossDomain: true\n    }), axios.get(SERVICE_ROOT_URL + \"/indices/nsw\", {\n      crossDomain: true\n    })];\n    let ausRequests = [axios.get(SERVICE_ROOT_URL + \"/summaries/aus\", {\n      crossDomain: true\n    }), axios.get(SERVICE_ROOT_URL + \"/indices/aus\", {\n      crossDomain: true\n    })];\n    axios.all(nswRequests).then(axios.spread((...responses) => {\n      this.activityData[\"nsw\"] = responses[0].data;\n      this.indexData[\"nsw\"] = responses[1].data;\n      let loading = { ...this.state.loading\n      };\n      loading.nsw = false;\n      this.setState({\n        loading\n      });\n    })).catch(errors => {\n      console.log(\"Errors: \" + errors);\n    });\n    axios.all(ausRequests).then(axios.spread((...responses) => {\n      this.activityData[\"aus\"] = responses[0].data;\n      this.indexData[\"aus\"] = responses[1].data;\n      let loading = { ...this.state.loading\n      };\n      loading.aus = false;\n      this.setState({\n        loading\n      });\n      console.log(\"AU data loaded.\");\n      console.log(this.state.loading);\n    })).catch(errors => {\n      console.log(\"Errors: \" + errors);\n    });\n  }\n\n  changeViewPort(area) {\n    if (this.state.currentArea !== area) {\n      this.setState({\n        currentArea: area\n      });\n      this.resetView();\n    }\n  }\n\n  render() {\n    setInterval(() => this.changeViewPort(this.props.area), 1000);\n    return /*#__PURE__*/React.createElement(Map, {\n      id: \"map\",\n      onViewportChanged: this.onViewportChanged,\n      viewport: this.state.viewport,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LayersControl, {\n      position: \"topleft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Control, {\n      position: \"topleft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"leaflet-control-layers feat-btn-reset-view\",\n      onClick: this.resetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faDotCircle,\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(LayersControl.BaseLayer, {\n      checked: \"checked\",\n      name: \"Black and White\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      attribution: \"&copy <a href='http://osm.org/copyright'> OpenStreetMap</a> contributors\",\n      url: \"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(LayersControl.BaseLayer, {\n      name: \"Coloured\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      attribution: \"&copy <a href='http://osm.org/copyright'> OpenStreetMap</a> contributors\",\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(LayerGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }\n    }, this.indexData[this.state.currentArea] ? /*#__PURE__*/React.createElement(GeoJSON, {\n      test: console.log(\"Geo: \" + this.state.currentArea),\n      key: this.state.currentArea,\n      data: this.indexData[this.state.currentArea],\n      style: feature => ({\n        color: '#4a83ec',\n        weight: 0.5,\n        fillColor: this.getColor(feature['properties'][this.state.selectedContentId]),\n        fillOpacity: 0.85\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null)), /*#__PURE__*/React.createElement(LayerGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }\n    }, this.state.selectedActivity && this.activityData[this.state.currentArea][\"summary\"] ? this.activityData[this.state.currentArea][\"summary\"].map((city, k) => {\n      return /*#__PURE__*/React.createElement(CircleMarker, {\n        color: \"#dbae28\",\n        key: k,\n        center: [city[\"point\"][1], city[\"point\"][0]] //radius={5 * Math.log(city[this.state.selected] / 100000)}\n        ,\n        radius: 5 * Math.log(city[this.state.selectedActivity + \"_total\"]),\n        fillOpacity: 0.3,\n        stroke: true,\n        weight: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        direction: \"right\",\n        offset: [-8, -2],\n        opacity: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }\n      }, city[\"name\"], \": \"), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }\n      }, parseInt(city[this.state.selectedActivity + \"_total\"]).toLocaleString(\"en-AU\"), \" (\", +(100 * Math.round(city[this.state.selectedActivity] + \"e+4\") + \"e-4\"), \"%)\")));\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null)), this.state.selectedContent ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Legend, {\n      getColor: this.getColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Control, {\n      position: \"bottomleft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 19\n      }\n    }, this.state.selectedContent ? this.state.selectedContent[\"text\"] : \"\", \" \")))) : /*#__PURE__*/React.createElement(React.Fragment, null), !this.state.loading[this.state.currentArea] ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Control, {\n      position: \"topright\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ButtonGroup, {\n      toggle: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }\n    }, layers.map(layer => /*#__PURE__*/React.createElement(LayerChooser, {\n      layer: layer,\n      key: layer.id,\n      variant: layer.variant,\n      className: layer.className,\n      selectLayer: this.selectLayer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(Control, {\n      position: \"topright\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ButtonGroup, {\n      vertical: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }\n    }, activities.map(activity => /*#__PURE__*/React.createElement(ActivityChooser, {\n      activity: activity,\n      key: activity.id,\n      selectActivity: this.setSelectedActivity,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }\n    }))))) : /*#__PURE__*/React.createElement(Control, {\n      position: \"topright\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 21\n      }\n    }, \"Loading data...\"))));\n  }\n\n}\n\nexport default MainMap;","map":{"version":3,"sources":["/mnt/tanto/Courses/CCC/Learns/react/ausmap-cdb/src/components/MainMap.js"],"names":["React","Component","Map","TileLayer","GeoJSON","Marker","Popup","CircleMarker","Tooltip","LayersControl","LayerGroup","Circle","Control","library","FontAwesomeIcon","faDotCircle","faRunning","faHamburger","faFilm","ButtonGroup","axios","activities","layers","LayerChooser","ActivityChooser","Legend","add","COLORS","SERVICE_ROOT_URL","MainMap","activityData","indexData","state","viewport","props","vp","selectedActivity","loading","selectedContentId","selectedContent","currentArea","getColor","val","color","resetView","setState","onViewportChanged","setSelectedActivity","activity","selectLayer","content","id","componentDidMount","nswRequests","get","crossDomain","ausRequests","all","then","spread","responses","data","nsw","catch","errors","console","log","aus","changeViewPort","area","render","setInterval","feature","weight","fillColor","fillOpacity","map","city","k","Math","parseInt","toLocaleString","round","layer","variant","className"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Map, TileLayer,  GeoJSON, Marker, Popup, CircleMarker, Tooltip,\n  LayersControl, LayerGroup, Circle } from \"react-leaflet\";\nimport Control from \"react-leaflet-control\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faDotCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { faRunning, faHamburger,\n  faFilm } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { ButtonGroup } from \"react-bootstrap\";\n\nimport axios from \"axios\";\n\nimport activities from \"../activities.json\";\nimport layers from \"../layers.json\";\n\nimport LayerChooser from \"./LayerChooser\";\nimport ActivityChooser from \"./ActivityChooser\";\nimport Legend from \"./Legend\";\n\nlibrary.add(faDotCircle, faRunning, faHamburger, faFilm); \n\nconst COLORS = [\"#f7fbff\", \"#deebf7\", \"#c6dbef\", \"#9ecae1\", \"#6baed6\",\n                \"#4292c6\", \"#2171b5\", \"#08519c\", \"#08306b\", \"#05234d\"]\n\n//const SERVICE_ROOT_URL = \"http://localhost/json/data\";\nconst SERVICE_ROOT_URL = \"http://localhost:5000\";\n//const SERVICE_ROOT_URL = \"http://progo.lastanto.com/json/data\";\n\nclass MainMap extends Component {\n\n  activityData = {}\n  indexData = {}\n\n  state = {\n    viewport: this.props.vp,\n    selectedActivity: null,\n    loading: {\n      \"nsw\": true,  \n      \"aus\": true\n      },\n    selectedContentId: 0,\n    selectedContent: null,\n    currentArea: \"aus\"\n  }\n\n  componentDidMount(){\n    let nswRequests = [\n      axios.get(SERVICE_ROOT_URL + \"/summaries/nsw\", {crossDomain: true }),\n      axios.get(SERVICE_ROOT_URL + \"/indices/nsw\", {crossDomain: true })\n    ];\n\n    let ausRequests = [\n      axios.get(SERVICE_ROOT_URL + \"/summaries/aus\", {crossDomain: true }),\n      axios.get(SERVICE_ROOT_URL + \"/indices/aus\", {crossDomain: true })\n    ];\n\n  axios\n    .all(nswRequests)\n    .then(\n      axios.spread((...responses) => {\n        this.activityData[\"nsw\"] = responses[0].data;\n        this.indexData[\"nsw\"] = responses[1].data;\n        let loading = {...this.state.loading};\n        loading.nsw = false;\n        this.setState({ loading });\n      })\n    )\n    .catch(errors => {\n      console.log(\"Errors: \"+errors);\n    });\n\n    axios\n    .all(ausRequests)\n    .then(\n      axios.spread((...responses) => {\n        this.activityData[\"aus\"] = responses[0].data;\n        this.indexData[\"aus\"] = responses[1].data;\n        let loading = {...this.state.loading};\n        loading.aus = false;\n        this.setState({ loading });\n        console.log(\"AU data loaded.\");\n        console.log(this.state.loading)\n      })\n    )\n    .catch(errors => {\n        console.log(\"Errors: \"+errors);\n    });\n\n    }\n\n  getColor = (val) => {\n    let color = COLORS[0];\n\n    if (val > 90000) {\n      color = COLORS[9];\n    } else if (val > 80000) {\n      color = COLORS[8];\n    } else if (val > 70000) {\n      color = COLORS[7];\n    } else if (val > 60000) {\n      color = COLORS[6];\n    } else if (val > 50000) {\n      color = COLORS[5];\n    } else if (val > 40000) {\n      color = COLORS[4];\n    } else if (val > 30000) {\n      color = COLORS[3];\n    } else if (val > 20000) {\n      color = COLORS[2];\n    } else if (val > 10000) {\n      color = COLORS[1];\n    }\n\n    return color;\n  };\n\n  resetView = () => {\n    this.setState({ viewport: this.props.vp });\n  }\n\n  onViewportChanged = (viewport) => {\n    this.setState({ viewport });\n  }\n\n  setSelectedActivity = (activity) => {\n    this.setState({ selectedActivity: activity });\n  }\n\n  changeViewPort(area) {\n    if(this.state.currentArea !== area ) {\n      this.setState({ currentArea:area });\n      this.resetView();\n    }\n  }\n\n  selectLayer = (content) => {\n    this.setState({ selectedContentId:content.id,\n                    selectedContent:content })\n  }\n\n  render() {\n    setInterval(() => this.changeViewPort(this.props.area), 1000);\n    return (\n      <Map id=\"map\" onViewportChanged={this.onViewportChanged}\n          viewport={this.state.viewport}>\n        <LayersControl position=\"topleft\">\n          <Control position=\"topleft\">\n            <button className=\"leaflet-control-layers feat-btn-reset-view\"\n              onClick={ this.resetView }>\n              <FontAwesomeIcon icon={ faDotCircle } size=\"lg\"/>\n            </button>\n          </Control>\n          <LayersControl.BaseLayer checked=\"checked\" name=\"Black and White\">\n            <TileLayer\n              attribution=\"&amp;copy <a href='http://osm.org/copyright'>\n                OpenStreetMap</a> contributors\"\n              url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n          <LayersControl.BaseLayer name=\"Coloured\">\n            <TileLayer\n              attribution=\"&amp;copy <a href='http://osm.org/copyright'>\n                OpenStreetMap</a> contributors\"\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n          </LayersControl>\n          <LayerGroup>\n          {this.indexData[this.state.currentArea] ? (\n            <GeoJSON test={console.log(\"Geo: \"+this.state.currentArea)}\n              key={this.state.currentArea}\n              data={this.indexData[this.state.currentArea]}\n              style={(feature) => ({\n              color: '#4a83ec',\n              weight: 0.5,\n              fillColor: this.getColor(feature['properties'][this.state.selectedContentId]),\n              fillOpacity: 0.85\n            })}\n          />\n          ) : (<></>)}\n          </LayerGroup>\n          <LayerGroup>\n          {this.state.selectedActivity && this.activityData[this.state.currentArea][\"summary\"] ? (\n          this.activityData[this.state.currentArea][\"summary\"].map((city, k) => {\n              return (\n                <CircleMarker\n                  color=\"#dbae28\"\n                  key={k}\n                  center={[city[\"point\"][1], city[\"point\"][0]]}\n                  //radius={5 * Math.log(city[this.state.selected] / 100000)}\n                  radius={5 * Math.log(city[this.state.selectedActivity+\"_total\"])}\n                  fillOpacity={0.3}\n                  stroke={true}\n                  weight={2}\n                >\n                  <Tooltip direction=\"right\" offset={[-8, -2]} opacity={1}>\n                    <strong>{city[\"name\"]}: </strong>\n                    <span>{ parseInt(city[this.state.selectedActivity+\"_total\"]).toLocaleString(\"en-AU\")} ({+(100*Math.round(city[this.state.selectedActivity]+\"e+4\") + \"e-4\")}%)</span>\n                  </Tooltip>\n                </CircleMarker>\n              );\n            })):(<></>)}\n            </LayerGroup>\n            {this.state.selectedContent ? (\n              <>\n          <Legend getColor={this.getColor} />\n          <Control position=\"bottomleft\" >\n            <span><strong>{this.state.selectedContent  ? this.state.selectedContent[\"text\"] : \"\"} </strong></span>  \n          </Control>\n          </>\n            ):(<></>)}\n          {!this.state.loading[this.state.currentArea] ? (\n            <>\n          <Control position=\"topright\" >\n            <ButtonGroup toggle>\n              {layers.map(layer => (\n                  <LayerChooser layer={layer} key={layer.id} variant={layer.variant} className={layer.className} selectLayer={this.selectLayer} />\n              ))}\n            </ButtonGroup>\n            <br/><br/><br/>\n          </Control>\n          <Control position=\"topright\" >\n            <ButtonGroup vertical>\n              {activities.map(activity => (\n                <ActivityChooser\n                  activity={activity}\n                  key={activity.id}\n                   selectActivity={this.setSelectedActivity}\n                />\n             ))}\n            </ButtonGroup>\n          </Control>\n                </>\n          ) : (\n          \n            <Control position=\"topright\" >\n              <span><strong>Loading data...</strong></span>\n            </Control>\n              )\n              }\n        </Map>\n      \n    );\n  }\n}\n\nexport default MainMap;\n"]},"metadata":{},"sourceType":"module"}