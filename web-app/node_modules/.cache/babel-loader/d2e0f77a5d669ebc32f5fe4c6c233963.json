{"ast":null,"code":"var _jsxFileName = \"/home/tanto/Courses/CCC/Learns/react/ausmap/src/App.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Control from 'react-leaflet-control';\nimport { Map, TileLayer, GeoJSON, Marker, Popup, CircleMarker, Tooltip, LayersControl, LayerGroup, Circle } from 'react-leaflet';\nimport library from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDotCircle } from '@fortawesome/free-regular-svg-icons';\nimport { faRunning, faGamepad, faLaptopHouse, faHamburger, faFilm, faChartPie, faPeopleCarry } from '@fortawesome/free-solid-svg-icons';\nimport cities from './cities.json';\nimport sydney from './sydney.json';\nimport aus from './aus.json';\nimport activities from './activities.json';\nimport layers from './layers.json';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport LayerChooser from './LayerChooser';\nimport Header from './components/Header';\nimport About from './components/About';\nlibrary.add(faDotCircle, faRunning, faGamepad, faLaptopHouse, faHamburger, faFilm, faChartPie, faPeopleCarry);\nconst DEFAULT_ZOOM_LEVEL = 9; // Greater Sydney zoom level\n\nconst DEFAULT_CENTER = [-33.834905, 150.9673231]; // Greater Sidney center\n//const DEFAULT_ZOOM_LEVEL = 5; // Australia zoom level\n//const DEFAULT_CENTER =  = [-25.6101111,134.3547222] // Australia center\n\nconst DEFAULT_VIEWPORT = {\n  center: DEFAULT_CENTER,\n  zoom: DEFAULT_ZOOM_LEVEL\n}; //https://data.gov.au/geoserver/nsw-suburb-locality-boundaries-psma-administrative-boundaries/wfs?request=GetFeature&typeName=ckan_91e70237_d9d1_4719_a82f_e71b811154c6&outputFormat=json\n\nconst layerStyle = {\n  display: 'none',\n  float: 'right'\n};\nconst colors = ['#800026', '#BD0026', '#E31A1C', '#FC4E2A', '#FD8D3C', '#FEB24C', '#FED976', '#FFEDA0'];\n\nfunction getColor(d) {\n  let rand = Math.floor(Math.random() * Math.floor(colors.length));\n  return colors[rand];\n}\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      viewport: DEFAULT_VIEWPORT,\n      selected: 'exercise',\n      selectedData: aus\n    };\n\n    this.resetView = () => {\n      console.log(\"resetView\");\n      this.setState({\n        viewport: DEFAULT_VIEWPORT\n      });\n    };\n\n    this.onViewportChanged = viewport => {\n      this.setState({\n        viewport\n      });\n    };\n\n    this.setSelected = activity => {\n      console.log(\"setSelected: \" + activity);\n      this.setState({\n        selected: activity\n      });\n    };\n\n    this.selectOverlayLayer = layer => {\n      console.log(\"selectOverlayLayer: \" + layer);\n      this.setState({\n        selectedData: layer.data\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, \"Activities in Sydney During #AustraliaLockdown\"), /*#__PURE__*/React.createElement(Map, {\n      onViewportChanged: this.onViewportChanged,\n      viewport: this.state.viewport,\n      style: {\n        width: \"100%\",\n        height: \"80vh\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(LayersControl, {\n      position: \"topleft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Control, {\n      position: \"topleft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"leaflet-control-layers btn-reset-view\",\n      onClick: this.resetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faDotCircle,\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }))), /*#__PURE__*/React.createElement(LayersControl.BaseLayer, {\n      checked: \"checked\",\n      name: \"Black and White\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\"> OpenStreetMap</a> contributors\",\n      url: \"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(LayersControl.BaseLayer, {\n      name: \"Colored\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\"> OpenStreetMap</a> contributors\",\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }))), cities.map((city, k) => {\n      return /*#__PURE__*/React.createElement(CircleMarker, {\n        key: k,\n        center: [city[\"coordinates\"][1], city[\"coordinates\"][0]],\n        radius: 5 * Math.log(city[this.state.selected] / 100000),\n        fillOpacity: 0.9,\n        stroke: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        direction: \"right\",\n        offset: [-8, -2],\n        opacity: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }\n      }, city[\"name\"]), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }\n      }, city[\"id\"] + \" \" + city[this.state.selected])));\n    }), /*#__PURE__*/React.createElement(LayerGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(GeoJSON, {\n      data: this.state.selectedData,\n      style: feature => ({\n        color: '#4a83ec',\n        weight: 0.5,\n        fillColor: getColor(feature),\n        fillOpacity: 0.2\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Marker, {\n      position: [50, 10],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Popup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, \"Popup for any custom information.\"))), /*#__PURE__*/React.createElement(Control, {\n      position: \"topright\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }\n    }, activities.map(activity => /*#__PURE__*/React.createElement(Col, {\n      className: \"mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(LayerChooser, {\n      layer: activity,\n      key: activity.id,\n      selectLayer: this.setSelected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 19\n      }\n    })))))), /*#__PURE__*/React.createElement(Control, {\n      position: \"topright\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 15\n      }\n    }, layers.map(layer => /*#__PURE__*/React.createElement(Col, {\n      className: \"mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(LayerChooser, {\n      layer: layer,\n      key: layer.id,\n      selectLayer: this.selectOverlayLayer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 19\n      }\n    }))))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/tanto/Courses/CCC/Learns/react/ausmap/src/App.js"],"names":["React","Component","BrowserRouter","Router","Route","Control","Map","TileLayer","GeoJSON","Marker","Popup","CircleMarker","Tooltip","LayersControl","LayerGroup","Circle","library","FontAwesomeIcon","faDotCircle","faRunning","faGamepad","faLaptopHouse","faHamburger","faFilm","faChartPie","faPeopleCarry","cities","sydney","aus","activities","layers","Container","Row","Col","LayerChooser","Header","About","add","DEFAULT_ZOOM_LEVEL","DEFAULT_CENTER","DEFAULT_VIEWPORT","center","zoom","layerStyle","display","float","colors","getColor","d","rand","Math","floor","random","length","App","state","viewport","selected","selectedData","resetView","console","log","setState","onViewportChanged","setSelected","activity","selectOverlayLayer","layer","data","render","textAlign","width","height","map","city","k","feature","color","weight","fillColor","fillOpacity","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport './App.css';\nimport Control from 'react-leaflet-control';\nimport { Map, TileLayer,  GeoJSON, Marker, Popup, CircleMarker, Tooltip,\n  LayersControl, LayerGroup, Circle } from 'react-leaflet';\n\nimport library from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDotCircle } from '@fortawesome/free-regular-svg-icons';\nimport { faRunning, faGamepad, faLaptopHouse, faHamburger, faFilm, faChartPie,\n  faPeopleCarry } from '@fortawesome/free-solid-svg-icons';\n\nimport cities from './cities.json';\nimport sydney from './sydney.json';\nimport aus from './aus.json';\n\nimport activities from './activities.json';\nimport layers from './layers.json';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport LayerChooser from './LayerChooser';\nimport Header from './components/Header';\nimport About from './components/About';\n\nlibrary.add(faDotCircle, faRunning, faGamepad, faLaptopHouse, faHamburger,\n  faFilm, faChartPie, faPeopleCarry); \n\nconst DEFAULT_ZOOM_LEVEL = 9; // Greater Sydney zoom level\nconst DEFAULT_CENTER = [-33.834905,150.9673231]; // Greater Sidney center\n\n//const DEFAULT_ZOOM_LEVEL = 5; // Australia zoom level\n//const DEFAULT_CENTER =  = [-25.6101111,134.3547222] // Australia center\nconst DEFAULT_VIEWPORT = {\n  center: DEFAULT_CENTER,\n  zoom: DEFAULT_ZOOM_LEVEL\n}\n\n//https://data.gov.au/geoserver/nsw-suburb-locality-boundaries-psma-administrative-boundaries/wfs?request=GetFeature&typeName=ckan_91e70237_d9d1_4719_a82f_e71b811154c6&outputFormat=json\n\nconst layerStyle = {\n  display: 'none',\n  float: 'right'\n}\n\nconst colors = ['#800026','#BD0026', '#E31A1C', '#FC4E2A', '#FD8D3C', '#FEB24C',\n '#FED976', '#FFEDA0'];\nfunction getColor(d) {\n  let rand = Math.floor(Math.random() * Math.floor(colors.length));\n  return colors[rand];\n}\n\nclass App extends Component {\n  state = {\n    viewport: DEFAULT_VIEWPORT,\n    selected: 'exercise',\n    selectedData: aus\n  }\n\n  resetView = () => {\n    console.log(\"resetView\");\n    this.setState({ viewport: DEFAULT_VIEWPORT })\n  }\n\n  onViewportChanged = (viewport) => {\n    this.setState({ viewport })\n  }\n\n  setSelected = (activity) => {\n    console.log(\"setSelected: \"+activity);\n    this.setState({ selected: activity })\n  }\n\n  selectOverlayLayer = (layer) => {\n    console.log(\"selectOverlayLayer: \"+layer);\n    this.setState({ selectedData: layer.data })\n  }\n\n  render() {\n    return (\n      <div>\n        <h3 style={{ textAlign: \"center\" }}>Activities in Sydney During\n          #AustraliaLockdown</h3>\n        <Map onViewportChanged={this.onViewportChanged}\n          viewport={this.state.viewport}\n          style={{ width: \"100%\", height: \"80vh\" }}>\n          <LayersControl position=\"topleft\">\n          <Control position=\"topleft\">\n            <button\n              className=\"leaflet-control-layers btn-reset-view\"\n              onClick={ this.resetView }\n            >\n          <FontAwesomeIcon icon={ faDotCircle } size=\"lg\"/>\n          </button>\n          </Control>\n          <LayersControl.BaseLayer\n            checked=\"checked\"\n            name=\"Black and White\">\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">\n                OpenStreetMap</a> contributors'\n              url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n              />\n            </LayersControl.BaseLayer>\n          <LayersControl.BaseLayer\n            name=\"Colored\">\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">\n                OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n          </LayersControl>\n\n          {cities.map((city, k) => {\n              return (\n                <CircleMarker\n                  key={k}\n                  center={[city[\"coordinates\"][1], city[\"coordinates\"][0]]}\n                  radius={5 * Math.log(city[this.state.selected] / 100000)}\n                  fillOpacity={0.9}\n                  stroke={true}\n                >\n                  <Tooltip direction=\"right\" offset={[-8, -2]} opacity={1}>\n                    <strong>{city[\"name\"]}</strong>\n                    <span>{city[\"id\"] + \" \" + city[this.state.selected]}</span>\n                  </Tooltip>\n                </CircleMarker>\n              );\n            })}\n            \n          <LayerGroup>\n            <GeoJSON\n            data={this.state.selectedData}\n              style={(feature) => ({\n              color: '#4a83ec',\n              weight: 0.5,\n              fillColor: getColor(feature),\n              fillOpacity: 0.2,\n            })}\n          />\n          <Marker position={[50, 10]}>\n            <Popup>\n              Popup for any custom information.\n            </Popup>\n          </Marker>\n          </LayerGroup>\n          <Control position=\"topright\" >\n            <Container>\n              <Row>\n                {activities.map(activity => (\n                <Col\n                  className=\"mb-5\">\n                  <LayerChooser\n                    layer={activity}\n                    key={activity.id}\n                    selectLayer={this.setSelected}\n                  />\n                </Col>\n              ))}\n              </Row>\n            </Container>\n          </Control>\n          <Control position=\"topright\" >\n            <Container>\n              <Row>\n              {layers.map(layer => (\n                <Col className=\"mb-5\">\n                  <LayerChooser layer={layer} key={layer.id} selectLayer={this.selectOverlayLayer} />\n                </Col>\n              ))}\n              </Row>\n            </Container>\n          </Control>\n        </Map>\n\n      </div>          \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}