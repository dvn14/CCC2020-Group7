{"ast":null,"code":"import { MapControl, withLeaflet } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport PropTypes from \"prop-types\";\n\nclass Legend extends MapControl {\n  createLeafletElement(props) {}\n\n  componentDidMount() {\n    const LOCALE = \"en-AU\";\n    const box = L.control({\n      position: this.props.position\n    });\n\n    box.onAdd = () => {\n      const div = L.DomUtil.create(\"div\", \"legend\");\n      let values = [];\n\n      for (let i = 0; i < this.props.levels.length; i++) {\n        let start = this.props.levels[i];\n        let end = this.props.levels[i + 1];\n        let value = \"<span style='opacity: 0.85; background:\" + this.props.getColor(start + 1) + \"'>&nbsp; &nbsp; &nbsp;</span> \" + parseInt(start).toLocaleString(LOCALE) + (end ? \"&ndash;\" + parseInt(end).toLocaleString(LOCALE) : \"+\");\n        values.push(value);\n      }\n\n      div.innerHTML = values.join(\"<br/>\");\n      return div;\n    };\n\n    box.addTo(this.props.leaflet.map);\n  }\n\n}\n\nLegend.propTypes = {\n  colors: PropTypes.object.isRequired,\n  levels: PropTypes.object.isRequired,\n  position: PropTypes.object.isRequired\n};\nexport default withLeaflet(Legend);","map":{"version":3,"sources":["/mnt/tanto/Courses/CCC/Learns/react/ausmap-cdb/src/components/Legend.js"],"names":["MapControl","withLeaflet","L","PropTypes","Legend","createLeafletElement","props","componentDidMount","LOCALE","box","control","position","onAdd","div","DomUtil","create","values","i","levels","length","start","end","value","getColor","parseInt","toLocaleString","push","innerHTML","join","addTo","leaflet","map","propTypes","colors","object","isRequired"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,eAAxC;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,MAAN,SAAqBJ,UAArB,CAAgC;AAC9BK,EAAAA,oBAAoB,CAACC,KAAD,EAAQ,CAAE;;AAE9BC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,MAAM,GAAG,OAAf;AACA,UAAMC,GAAG,GAAGP,CAAC,CAACQ,OAAF,CAAU;AAAEC,MAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWK;AAAvB,KAAV,CAAZ;;AAEAF,IAAAA,GAAG,CAACG,KAAJ,GAAY,MAAM;AAChB,YAAMC,GAAG,GAAGX,CAAC,CAACY,OAAF,CAAUC,MAAV,CAAiB,KAAjB,EAAwB,QAAxB,CAAZ;AACA,UAAIC,MAAM,GAAG,EAAb;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKX,KAAL,CAAWY,MAAX,CAAkBC,MAAtC,EAA8CF,CAAC,EAA/C,EAAmD;AACjD,YAAIG,KAAK,GAAG,KAAKd,KAAL,CAAWY,MAAX,CAAkBD,CAAlB,CAAZ;AACA,YAAII,GAAG,GAAG,KAAKf,KAAL,CAAWY,MAAX,CAAkBD,CAAC,GAAG,CAAtB,CAAV;AACA,YAAIK,KAAK,GAAG,4CACR,KAAKhB,KAAL,CAAWiB,QAAX,CAAoBH,KAAK,GAAG,CAA5B,CADQ,GAER,gCAFQ,GAGRI,QAAQ,CAACJ,KAAD,CAAR,CAAgBK,cAAhB,CAA+BjB,MAA/B,CAHQ,IAIPa,GAAG,GACJ,YAAYG,QAAQ,CAACH,GAAD,CAAR,CAAcI,cAAd,CAA6BjB,MAA7B,CADR,GAC+C,GAL3C,CAAZ;AAOAQ,QAAAA,MAAM,CAACU,IAAP,CAAYJ,KAAZ;AACD;;AAEDT,MAAAA,GAAG,CAACc,SAAJ,GAAgBX,MAAM,CAACY,IAAP,CAAY,OAAZ,CAAhB;AACA,aAAOf,GAAP;AACD,KAnBD;;AAqBAJ,IAAAA,GAAG,CAACoB,KAAJ,CAAU,KAAKvB,KAAL,CAAWwB,OAAX,CAAmBC,GAA7B;AACD;;AA7B6B;;AAgChC3B,MAAM,CAAC4B,SAAP,GAAmB;AACjBC,EAAAA,MAAM,EAAE9B,SAAS,CAAC+B,MAAV,CAAiBC,UADR;AAEjBjB,EAAAA,MAAM,EAAEf,SAAS,CAAC+B,MAAV,CAAiBC,UAFR;AAGjBxB,EAAAA,QAAQ,EAAER,SAAS,CAAC+B,MAAV,CAAiBC;AAHV,CAAnB;AAMA,eAAelC,WAAW,CAACG,MAAD,CAA1B","sourcesContent":["import { MapControl, withLeaflet } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport PropTypes from \"prop-types\";\n\nclass Legend extends MapControl {\n  createLeafletElement(props) {}\n\n  componentDidMount() {\n    const LOCALE = \"en-AU\";\n    const box = L.control({ position: this.props.position });\n\n    box.onAdd = () => {\n      const div = L.DomUtil.create(\"div\", \"legend\");\n      let values = [];\n      \n      for (let i = 0; i < this.props.levels.length; i++) {\n        let start = this.props.levels[i];\n        let end = this.props.levels[i + 1];\n        let value = \"<span style='opacity: 0.85; background:\" +\n            this.props.getColor(start + 1) +\n            \"'>&nbsp; &nbsp; &nbsp;</span> \" +\n            parseInt(start).toLocaleString(LOCALE) +\n            (end ?\n            \"&ndash;\" + parseInt(end).toLocaleString(LOCALE) : \"+\")\n\n        values.push(value);\n      }\n\n      div.innerHTML = values.join(\"<br/>\");\n      return div;\n    };\n    \n    box.addTo(this.props.leaflet.map);\n  }\n}\n\nLegend.propTypes = {\n  colors: PropTypes.object.isRequired,\n  levels: PropTypes.object.isRequired,\n  position: PropTypes.object.isRequired\n}\n\nexport default withLeaflet(Legend);\n"]},"metadata":{},"sourceType":"module"}