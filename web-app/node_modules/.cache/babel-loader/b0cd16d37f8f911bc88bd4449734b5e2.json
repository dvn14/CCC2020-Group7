{"ast":null,"code":"var _jsxFileName = \"/home/tanto/Courses/CCC/Learns/react/ausmap/src/components/MainMap.js\";\nimport React from 'react';\n\nfunction MainMap() {\n  return /*#__PURE__*/React.createElement(Map, {\n    onViewportChanged: this.onViewportChanged,\n    viewport: this.state.viewport,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LayersControl, {\n    position: \"topleft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Control, {\n    position: \"topleft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"leaflet-control-layers btn-reset-view\",\n    onClick: this.resetView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faDotCircle,\n    size: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(LayersControl.BaseLayer, {\n    checked: \"checked\",\n    name: \"Black and White\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TileLayer, {\n    attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\"> OpenStreetMap</a> contributors\",\n    url: \"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(LayersControl.BaseLayer, {\n    name: \"Colored\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TileLayer, {\n    attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\"> OpenStreetMap</a> contributors\",\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }))), cities.map((city, k) => {\n    return /*#__PURE__*/React.createElement(CircleMarker, {\n      key: k,\n      center: [city[\"coordinates\"][1], city[\"coordinates\"][0]],\n      radius: 5 * Math.log(city[this.state.selected] / 100000),\n      fillOpacity: 0.9,\n      stroke: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Tooltip, {\n      direction: \"right\",\n      offset: [-8, -2],\n      opacity: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 19\n      }\n    }, city[\"name\"]), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 19\n      }\n    }, city[\"id\"] + \" \" + city[this.state.selected])));\n  }), /*#__PURE__*/React.createElement(LayerGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GeoJSON, {\n    data: this.state.selectedData,\n    style: feature => ({\n      color: '#4a83ec',\n      weight: 0.5,\n      fillColor: getColor(feature),\n      fillOpacity: 0.2\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: [50, 10],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Popup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, \"Popup for any custom information.\"))), /*#__PURE__*/React.createElement(Control, {\n    position: \"topright\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, activities.map(activity => /*#__PURE__*/React.createElement(LayerChooser, {\n    layer: activity,\n    key: activity.id,\n    selectLayer: this.setSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Control, {\n    position: \"topright\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, layers.map(layer => /*#__PURE__*/React.createElement(LayerChooser, {\n    layer: layer,\n    key: layer.id,\n    selectLayer: this.selectOverlayLayer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }))));\n}\n\nconst headerStyle = {};\nexport default MainMap;","map":{"version":3,"sources":["/home/tanto/Courses/CCC/Learns/react/ausmap/src/components/MainMap.js"],"names":["React","MainMap","onViewportChanged","state","viewport","resetView","faDotCircle","cities","map","city","k","Math","log","selected","selectedData","feature","color","weight","fillColor","getColor","fillOpacity","activities","activity","id","setSelected","layers","layer","selectOverlayLayer","headerStyle"],"mappings":"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","sourcesContent":["import React from 'react'\n\nfunction MainMap() {\n    return (\n        <Map onViewportChanged={this.onViewportChanged}\n        viewport={this.state.viewport}>\n        <LayersControl position=\"topleft\">\n        <Control position=\"topleft\">\n          <button\n            className=\"leaflet-control-layers btn-reset-view\"\n            onClick={ this.resetView }\n          >\n        <FontAwesomeIcon icon={ faDotCircle } size=\"lg\"/>\n        </button>\n        </Control>\n        <LayersControl.BaseLayer\n          checked=\"checked\"\n          name=\"Black and White\">\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">\n              OpenStreetMap</a> contributors'\n            url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n        <LayersControl.BaseLayer\n          name=\"Colored\">\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">\n              OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n        </LayersControl.BaseLayer>\n        </LayersControl>\n\n        {cities.map((city, k) => {\n            return (\n              <CircleMarker\n                key={k}\n                center={[city[\"coordinates\"][1], city[\"coordinates\"][0]]}\n                radius={5 * Math.log(city[this.state.selected] / 100000)}\n                fillOpacity={0.9}\n                stroke={true}\n              >\n                <Tooltip direction=\"right\" offset={[-8, -2]} opacity={1}>\n                  <strong>{city[\"name\"]}</strong>\n                  <span>{city[\"id\"] + \" \" + city[this.state.selected]}</span>\n                </Tooltip>\n              </CircleMarker>\n            );\n          })}\n          \n        <LayerGroup>\n          <GeoJSON\n          data={this.state.selectedData}\n            style={(feature) => ({\n            color: '#4a83ec',\n            weight: 0.5,\n            fillColor: getColor(feature),\n            fillOpacity: 0.2,\n          })}\n        />\n        <Marker position={[50, 10]}>\n          <Popup>\n            Popup for any custom information.\n          </Popup>\n        </Marker>\n        </LayerGroup>\n        <Control position=\"topright\" >\n              {activities.map(activity => (\n                <LayerChooser\n                  layer={activity}\n                  key={activity.id}\n                  selectLayer={this.setSelected}\n                />\n            ))}\n        </Control>\n        <Control position=\"topright\" >\n            {layers.map(layer => (\n                <LayerChooser layer={layer} key={layer.id} selectLayer={this.selectOverlayLayer} />\n            ))}\n        </Control>\n      </Map>\n    )\n}\n\nconst headerStyle = {\n\n}\n\nexport default MainMap;\n"]},"metadata":{},"sourceType":"module"}