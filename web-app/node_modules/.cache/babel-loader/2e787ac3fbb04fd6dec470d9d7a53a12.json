{"ast":null,"code":"var _jsxFileName = \"/home/tanto/Courses/CCC/Learns/react/ausmap/src/App.js\";\nimport React from 'react';\nimport { Map, Circle, TileLayer, LayersControl, FeatureGroup } from 'react-leaflet';\nimport JQuery from 'jquery';\nimport { ShapeFile } from 'react-leaflet-shapefile';\nconst {\n  BaseLayer,\n  Overlay\n} = LayersControl;\nexport default class ShapefileExample extends React.Component {\n  constructor() {\n    super();\n    this.handleFile = this.handleFile.bind(this);\n    this.readerLoad = this.readerLoad.bind(this);\n    this.state = {\n      geodata: null,\n      isadded: false\n    };\n  }\n\n  readerLoad(e) {\n    this.setState({\n      geodata: e.target.result\n    });\n    this.setState({\n      isadded: true\n    });\n  }\n\n  handleFile(e) {\n    var reader = new FileReader();\n    var file = e.target.files[0];\n\n    reader.onload = function (upload) {\n      this.readerLoad(upload);\n    }.bind(this);\n\n    reader.readAsArrayBuffer(file);\n  }\n\n  onEachFeature(feature, layer) {\n    if (feature.properties) {\n      layer.bindPopup(Object.keys(feature.properties).map(function (k) {\n        return k + \": \" + feature.properties[k];\n      }).join(\"<br />\"), {\n        maxHeight: 200\n      });\n    }\n  }\n\n  render() {\n    let ShapeLayers = null;\n\n    if (this.state.isadded === true) {\n      ShapeLayers = /*#__PURE__*/React.createElement(Overlay, {\n        checked: true,\n        name: \"Feature group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 22\n        }\n      }, /*#__PURE__*/React.createElement(FeatureGroup, {\n        color: \"purple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ShapeFile, {\n        data: this.state.geodata,\n        onEachFeature: this.onEachFeature,\n        isArrayBufer: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }\n      })));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.handleFile.bind(this),\n      className: \"inputfile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Map, {\n      center: [42.09618442380296, -71.5045166015625],\n      zoom: 2,\n      zoomControl: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(LayersControl, {\n      position: \"topright\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(BaseLayer, {\n      checked: true,\n      name: \"OpenStreetMap.Mapnik\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      url: \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    })), ShapeLayers)));\n  }\n\n}","map":{"version":3,"sources":["/home/tanto/Courses/CCC/Learns/react/ausmap/src/App.js"],"names":["React","Map","Circle","TileLayer","LayersControl","FeatureGroup","JQuery","ShapeFile","BaseLayer","Overlay","ShapefileExample","Component","constructor","handleFile","bind","readerLoad","state","geodata","isadded","e","setState","target","result","reader","FileReader","file","files","onload","upload","readAsArrayBuffer","onEachFeature","feature","layer","properties","bindPopup","Object","keys","map","k","join","maxHeight","render","ShapeLayers"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Map, Circle, TileLayer, LayersControl, FeatureGroup } from 'react-leaflet'\nimport JQuery from 'jquery'\nimport {ShapeFile} from 'react-leaflet-shapefile'\n\nconst { BaseLayer, Overlay } = LayersControl;\n\n\nexport default class ShapefileExample extends React.Component {\n\n  constructor() {\n    super();\n    this.handleFile = this.handleFile.bind(this);\n    this.readerLoad = this.readerLoad.bind(this);\n\n\n\n    this.state = {\n      geodata: null,\n      isadded: false\n    }\n  }\n\n\n  readerLoad(e) {\n    this.setState({ geodata: e.target.result });\n    this.setState({ isadded: true });\n  }\n\n  handleFile(e) {\n    var reader = new FileReader();\n        var file = e.target.files[0];\n        reader.onload = function(upload) {\n          this.readerLoad(upload);\n        }.bind(this);\n        reader.readAsArrayBuffer(file);\n  }\n  \n  onEachFeature(feature, layer) {\n\t\t\t\tif (feature.properties) {\n\t\t\t\t\tlayer.bindPopup(Object.keys(feature.properties).map(function(k) {\n\t\t\t\t\t\treturn k + \": \" + feature.properties[k];\n\t\t\t\t\t}).join(\"<br />\"), {\n\t\t\t\t\t\tmaxHeight: 200\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\n\n\n\n  render() {\n    let ShapeLayers = null;\n    if (this.state.isadded === true) {\n      ShapeLayers = (<Overlay checked name='Feature group'>\n        <FeatureGroup color='purple'>\n          <ShapeFile data={this.state.geodata} onEachFeature={this.onEachFeature} isArrayBufer={true}/>\n        </FeatureGroup>\n      </Overlay>);\n    }\n    \n    \n\n    return (\n      <div>\n        <div >\n          <input type=\"file\" onChange={this.handleFile.bind(this) } className=\"inputfile\"/>\n        </div>\n        <Map center={[42.09618442380296, -71.5045166015625]} zoom={2} zoomControl={true}>\n          <LayersControl position='topright'>\n            <BaseLayer checked name='OpenStreetMap.Mapnik'>\n              <TileLayer  url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"/>\n            </BaseLayer>\n            {ShapeLayers}\n          </LayersControl>\n        </Map>\n      </div>\n\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}