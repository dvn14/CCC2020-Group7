{"ast":null,"code":"var _jsxFileName = \"/home/tanto/Courses/CCC/Learns/react/ausmap/src/components/MainMap.js\";\nimport React, { Component } from 'react';\nimport Control from 'react-leaflet-control';\nimport { Map, TileLayer, GeoJSON, Marker, Popup, CircleMarker, Tooltip, LayersControl, LayerGroup, Circle } from 'react-leaflet';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDotCircle } from '@fortawesome/free-regular-svg-icons';\nimport { faRunning, faGamepad, faLaptopHouse, faHamburger, faFilm, faChartPie, faPeopleCarry } from '@fortawesome/free-solid-svg-icons'; //TODO: change to list\n//import cities from '../cities.json';\n\nimport cities from '../data/nsw-summary.json';\nimport cities2 from '../data/aus-summary.json';\nimport { ButtonGroup } from 'react-bootstrap'; //import aus from '../aus.json';\n\nimport aus from '../aus.json'; //import aus from '../data/data6207385239988214929.json';\n\nimport activities from '../activities.json';\nimport layers from '../layers.json';\nimport LayerChooser from './LayerChooser';\nimport Legend from \"./Legend\";\nlibrary.add(faDotCircle, faRunning, faGamepad, faLaptopHouse, faHamburger, faFilm, faChartPie, faPeopleCarry);\nconst ACTIVITY_DATA = {\n  \"au\": cities2,\n  \"nsw\": cities\n};\nconst DEFAULT_ZOOM_LEVEL = 9; // Greater Sydney zoom level\n\nconst DEFAULT_CENTER = [-33.834905, 150.9673231]; // Greater Sidney center\n//const DEFAULT_ZOOM_LEVEL = 5; // Australia zoom level\n//const DEFAULT_CENTER =  = [-25.6101111,134.3547222] // Australia center\n\nconst DEFAULT_VIEWPORT = {\n  center: DEFAULT_CENTER,\n  zoom: DEFAULT_ZOOM_LEVEL\n}; //https://data.gov.au/geoserver/nsw-suburb-locality-boundaries-psma-administrative-boundaries/wfs?request=GetFeature&typeName=ckan_91e70237_d9d1_4719_a82f_e71b811154c6&outputFormat=json\n\nconst layerStyle = {\n  display: 'none',\n  float: 'right'\n};\nconst colors = ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#005a32'];\n\nfunction getColor(d, idx) {\n  // TODO: Replace with the real implementation\n  let color = (90 - d['properties']['Name'].toUpperCase().codePointAt(idx)) % 8; //let color = Math.floor(Math.random() * Math.floor(colors.length));\n\n  return colors[color];\n}\n\nclass MainMap extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      viewport: this.props.vp,\n      selected: 'exercise',\n      selectedData: aus,\n      selectedLayerId: 0,\n      currentArea: \"nsw\",\n      activityData: ACTIVITY_DATA[\"nsw\"]\n    };\n\n    this.resetView = () => {\n      console.log(this.props.vp);\n      this.setState({\n        viewport: this.props.vp\n      });\n    };\n\n    this.onViewportChanged = viewport => {\n      this.setState({\n        viewport\n      });\n    };\n\n    this.setSelected = activity => {\n      this.setState({\n        selected: activity\n      });\n    };\n\n    this.selectOverlayLayer = layerId => {\n      console.log(\"id:\" + layerId + \"->\");\n      console.log(layers[layerId]);\n      this.setState({\n        selectedData: layers[layerId],\n        selectedLayerId: layerId\n      });\n    };\n  }\n\n  changeViewPort(area) {\n    console.log(\"area: \" + area);\n\n    if (this.state.currentArea !== area) {\n      this.state.activityData = ACTIVITY_DATA[area];\n      this.state.currentArea = area;\n      this.resetView();\n      console.log(\"reset\");\n    }\n  }\n\n  render() {\n    setInterval(() => this.changeViewPort(this.props.area), 2000);\n    return /*#__PURE__*/React.createElement(Map, {\n      id: \"map\",\n      onViewportChanged: this.onViewportChanged,\n      viewport: this.state.viewport,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(LayersControl, {\n      position: \"topleft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Control, {\n      position: \"topleft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"leaflet-control-layers feat-btn-reset-view\",\n      onClick: this.resetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faDotCircle,\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }))), /*#__PURE__*/React.createElement(LayersControl.BaseLayer, {\n      checked: \"checked\",\n      name: \"Black and White\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\"> OpenStreetMap</a> contributors\",\n      url: \"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(LayersControl.BaseLayer, {\n      name: \"Colored\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\"> OpenStreetMap</a> contributors\",\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(LayerGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(GeoJSON, {\n      data: aus\n      /*this.state.selectedData*/\n      ,\n      style: feature => ({\n        color: '#4a83ec',\n        weight: 0.5,\n        fillColor: getColor(feature, this.state.selectedLayerId),\n        fillOpacity: 0.6\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Marker, {\n      position: [50, 10],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Popup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, \"Popup for any custom information.\"))), /*#__PURE__*/React.createElement(LayerGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    }, this.state.activityData.map((city, k) => {\n      return /*#__PURE__*/React.createElement(CircleMarker, {\n        color: \"#dbae28\",\n        key: k,\n        center: [city[\"point\"][1], city[\"point\"][0]] //radius={5 * Math.log(city[this.state.selected] / 100000)}\n        ,\n        radius: 5 * Math.log(city[this.state.selected + \"_total\"]),\n        fillOpacity: 0.5,\n        stroke: true,\n        weight: 5,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        direction: \"right\",\n        offset: [-8, -2],\n        opacity: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }\n      }, city[\"name\"], \": \"), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }\n      }, city[this.state.selected + \"_total\"], \" (\", +(Math.round(city[this.state.selected] + \"e+2\") + \"e-2\"), \")%\")));\n    })), /*#__PURE__*/React.createElement(Legend, {\n      title: \"\",\n      desc: \"Just example (this scale will be based on the data)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Control, {\n      position: \"topright\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ButtonGroup, {\n      toggle: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, layers.map(layer => /*#__PURE__*/React.createElement(LayerChooser, {\n      layer: layer,\n      key: layer.id,\n      variant: layer.variant,\n      className: layer.className,\n      selectLayer: this.selectOverlayLayer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 19\n      }\n    })))), /*#__PURE__*/React.createElement(Control, {\n      position: \"topright\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ButtonGroup, {\n      vertical: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 15\n      }\n    }, activities.map(activity => /*#__PURE__*/React.createElement(LayerChooser, {\n      layer: activity,\n      key: activity.id,\n      selectLayer: this.setSelected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 19\n      }\n    })))));\n  }\n\n}\n\nexport default MainMap;","map":{"version":3,"sources":["/home/tanto/Courses/CCC/Learns/react/ausmap/src/components/MainMap.js"],"names":["React","Component","Control","Map","TileLayer","GeoJSON","Marker","Popup","CircleMarker","Tooltip","LayersControl","LayerGroup","Circle","library","FontAwesomeIcon","faDotCircle","faRunning","faGamepad","faLaptopHouse","faHamburger","faFilm","faChartPie","faPeopleCarry","cities","cities2","ButtonGroup","aus","activities","layers","LayerChooser","Legend","add","ACTIVITY_DATA","DEFAULT_ZOOM_LEVEL","DEFAULT_CENTER","DEFAULT_VIEWPORT","center","zoom","layerStyle","display","float","colors","getColor","d","idx","color","toUpperCase","codePointAt","MainMap","state","viewport","props","vp","selected","selectedData","selectedLayerId","currentArea","activityData","resetView","console","log","setState","onViewportChanged","setSelected","activity","selectOverlayLayer","layerId","changeViewPort","area","render","setInterval","feature","weight","fillColor","fillOpacity","map","city","k","Math","round","layer","id","variant","className"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Control from 'react-leaflet-control';\nimport { Map, TileLayer,  GeoJSON, Marker, Popup, CircleMarker, Tooltip,\n  LayersControl, LayerGroup, Circle } from 'react-leaflet';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDotCircle } from '@fortawesome/free-regular-svg-icons';\nimport { faRunning, faGamepad, faLaptopHouse, faHamburger, faFilm, faChartPie,\n  faPeopleCarry } from '@fortawesome/free-solid-svg-icons';\n\n//TODO: change to list\n//import cities from '../cities.json';\nimport cities from '../data/nsw-summary.json';\nimport cities2 from '../data/aus-summary.json';\n\nimport { ButtonGroup } from 'react-bootstrap';\n//import aus from '../aus.json';\n\nimport aus from '../aus.json';\n//import aus from '../data/data6207385239988214929.json';\n\nimport activities from '../activities.json';\nimport layers from '../layers.json';\nimport LayerChooser from './LayerChooser';\nimport Legend from \"./Legend\";\n\nlibrary.add(faDotCircle, faRunning, faGamepad, faLaptopHouse, faHamburger,\n  faFilm, faChartPie, faPeopleCarry); \n\nconst ACTIVITY_DATA = {\n  \"au\": cities2,\n  \"nsw\": cities\n}\n\nconst DEFAULT_ZOOM_LEVEL = 9; // Greater Sydney zoom level\nconst DEFAULT_CENTER = [-33.834905,150.9673231]; // Greater Sidney center\n\n//const DEFAULT_ZOOM_LEVEL = 5; // Australia zoom level\n//const DEFAULT_CENTER =  = [-25.6101111,134.3547222] // Australia center\nconst DEFAULT_VIEWPORT = {\n  center: DEFAULT_CENTER,\n  zoom: DEFAULT_ZOOM_LEVEL\n}\n\n//https://data.gov.au/geoserver/nsw-suburb-locality-boundaries-psma-administrative-boundaries/wfs?request=GetFeature&typeName=ckan_91e70237_d9d1_4719_a82f_e71b811154c6&outputFormat=json\n\nconst layerStyle = {\n  display: 'none',\n  float: 'right'\n}\n\nconst colors = ['#f7fcf5','#e5f5e0','#c7e9c0','#a1d99b', '#74c476','#41ab5d',\n                '#238b45', '#005a32'];\n\nfunction getColor(d, idx) { // TODO: Replace with the real implementation\n    let color = (90 - d['properties']['Name'].toUpperCase().codePointAt(idx)) % 8;\n  //let color = Math.floor(Math.random() * Math.floor(colors.length));\n  return colors[color];\n}\n\nclass MainMap extends Component {\n  state = {\n    viewport: this.props.vp,\n    selected: 'exercise',\n    selectedData: aus,\n    selectedLayerId: 0,\n    currentArea: \"nsw\",\n    activityData: ACTIVITY_DATA[\"nsw\"]\n  }\n\n  resetView = () => {\n    console.log(this.props.vp)\n    this.setState({ viewport: this.props.vp })\n  }\n\n  onViewportChanged = (viewport) => {\n    this.setState({ viewport })\n  }\n\n  setSelected = (activity) => {\n    this.setState({ selected: activity })\n  }\n\n  changeViewPort(area) {\n    console.log(\"area: \"+area)\n    if(this.state.currentArea !== area ) {\n      this.state.activityData = ACTIVITY_DATA[area]\n      this.state.currentArea = area\n      this.resetView()\n      console.log(\"reset\")\n    }\n  }\n\n  selectOverlayLayer = (layerId) => {\n    console.log(\"id:\"+layerId+\"->\")\n    console.log(layers[layerId])\n    this.setState({ selectedData: layers[layerId], selectedLayerId:layerId })\n  }\n\n  render() {\n    setInterval(() => this.changeViewPort(this.props.area), 2000);\n    return (\n        <Map id=\"map\" onViewportChanged={this.onViewportChanged}\n          viewport={this.state.viewport}>\n          <LayersControl position=\"topleft\">\n          <Control position=\"topleft\">\n            <button\n              className=\"leaflet-control-layers feat-btn-reset-view\"\n              onClick={ this.resetView }\n            >\n          <FontAwesomeIcon icon={ faDotCircle } size=\"lg\"/>\n          </button>\n          </Control>\n          <LayersControl.BaseLayer\n            checked=\"checked\"\n            name=\"Black and White\">\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">\n                OpenStreetMap</a> contributors'\n              url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n              />\n            </LayersControl.BaseLayer>\n          <LayersControl.BaseLayer\n            name=\"Colored\">\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">\n                OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n          </LayersControl>\n          <LayerGroup>\n            <GeoJSON\n            data={aus /*this.state.selectedData*/}\n              style={(feature) => ({\n              color: '#4a83ec',\n              weight: 0.5,\n              fillColor: getColor(feature, this.state.selectedLayerId),\n              fillOpacity: 0.6\n            })}\n          />\n          <Marker position={[50, 10]}>\n            <Popup>\n              Popup for any custom information.\n            </Popup>\n          </Marker>\n          </LayerGroup>\n          <LayerGroup>\n          {this.state.activityData.map((city, k) => {\n              return (\n                <CircleMarker\n                  color=\"#dbae28\"\n                  key={k}\n                  center={[city[\"point\"][1], city[\"point\"][0]]}\n                  //radius={5 * Math.log(city[this.state.selected] / 100000)}\n                  radius={5 * Math.log(city[this.state.selected+\"_total\"])}\n                  fillOpacity={0.5}\n                  stroke={true}\n                  weight={5}\n                >\n                  <Tooltip direction=\"right\" offset={[-8, -2]} opacity={1}>\n                    <strong>{city[\"name\"]}: </strong>\n                    <span>{city[this.state.selected+\"_total\"]} ({+(Math.round(city[this.state.selected]+\"e+2\") + \"e-2\")})%</span>\n                  </Tooltip>\n                </CircleMarker>\n              );\n            })}\n            </LayerGroup>\n          <Legend title=\"\" desc=\"Just example (this scale will be based on the data)\" />\n          <Control position=\"topright\" >\n            <ButtonGroup toggle>\n              {layers.map(layer => (\n                  <LayerChooser layer={layer} key={layer.id} variant={layer.variant} className={layer.className} selectLayer={this.selectOverlayLayer} />\n              ))}\n            </ButtonGroup>\n          </Control>\n          <Control position=\"topright\" >\n              <ButtonGroup vertical>\n                {activities.map(activity => (\n                  <LayerChooser\n                    layer={activity}\n                    key={activity.id}\n                    selectLayer={this.setSelected}\n                  />\n              ))}\n              </ButtonGroup>\n          </Control>\n        </Map>\n      \n    );\n  }\n}\n\nexport default MainMap;\n"]},"metadata":{},"sourceType":"module"}